GeneratedFiles/OsGenerated.c:11:26: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
    R0->Resource_Owner = INVALID_TASK;
                         ^
GeneratedFiles/OsGenerated.c:20:26: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
    R1->Resource_Owner = INVALID_TASK;
                         ^
GeneratedFiles/OsGenerated.c:73:16: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
    IDLE->ID = IDLE_TASK;
               ^
GeneratedFiles/OsGenerated.c:79:32: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
    IDLE->Activation_Request = 200;
                               ^
GeneratedFiles/OsGenerated.c:88:21: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
    RunningTaskID = INVALID_TASK;
                    ^
GeneratedFiles/OsGenerated.c:7:25: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.5]
    struct Resource *R0 = malloc(sizeof(struct Resource));
                        ^
GeneratedFiles/OsGenerated.c:16:25: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.5]
    struct Resource *R1 = malloc(sizeof(struct Resource));
                        ^
GeneratedFiles/OsGenerated.c:29:24: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.5]
    struct Task *Task1 = malloc(sizeof(struct Task));
                       ^
GeneratedFiles/OsGenerated.c:48:24: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.5]
    struct Task *Task2 = malloc(sizeof(struct Task));
                       ^
GeneratedFiles/OsGenerated.c:70:23: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.5]
    struct Task *IDLE = malloc(sizeof(struct Task));
                      ^
GeneratedFiles/OsGenerated.c:9:25: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.9]
    R0->Linked_Resource = 0;
                        ^
GeneratedFiles/OsGenerated.c:18:25: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-11.9]
    R1->Linked_Resource = 0;
                        ^
GeneratedFiles/OsGenerated.c:1:0: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-21.6]
#include <stdio.h>
^
GeneratedFiles/template.c:6:8: error: syntax error [syntaxError]
    {% for r in res %}
       ^
OsGenerated.c:10:27: error: Syntax Error: AST broken, binary operator '=' doesn't have two operands. [internalAstError]
    R0->Resrouce_Property = ;
                          ^
Sources/APIs_Sources/Events.c:55:64: style:inconclusive: Boolean expression 'EventMask!=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if (OsTasksPCB[RunningTaskID]->EventMask.Configured_Events & EventMask != 0)
                                                               ^
Sources/APIs_Sources/Events.c:55:64: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    if (OsTasksPCB[RunningTaskID]->EventMask.Configured_Events & EventMask != 0)
                                                               ^
Sources/APIs_Sources/OsTasks.c:27:19: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
  RunningTaskID = IDLE_TASK;
                  ^
Sources/APIs_Sources/OsTasks.c:23:51: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if(OsTasksPCB[RunningTaskID ]->Activation_Record == 1)
                                                  ^
Sources/APIs_Sources/OsTasks.c:46:19: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if(RunningTaskID == INVALID_TASK)
                  ^
Sources/APIs_Sources/OsTasks.c:53:45: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 else if(OsTasksPCB[RunningTaskID]->F_PREEM == TASK_FULL)
                                            ^
Sources/APIs_Sources/OsTasks.c:77:29: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (Ready_Queue.Queue_Size == 0)
                            ^
Sources/APIs_Sources/Events.c:16:16: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (TaskID >= MAX_TASKS) // Invalid task ID
               ^
Sources/APIs_Sources/Events.c:21:38: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[TaskID]->Extended == 0)
                                     ^
Sources/APIs_Sources/Events.c:25:35: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[TaskID]->State == SUSPENDED)
                                  ^
Sources/APIs_Sources/Events.c:32:19: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (condition != 0) // if there is a match between configured and activated events
                  ^
Sources/APIs_Sources/Events.c:44:45: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[RunningTaskID]->Extended == 0)
                                            ^
Sources/APIs_Sources/Events.c:49:56: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[RunningTaskID]->Reasourses_Occupied > 0)
                                                       ^
Sources/APIs_Sources/Events.c:55:76: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[RunningTaskID]->EventMask.Configured_Events & EventMask != 0)
                                                                           ^
Sources/APIs_Sources/Events.c:68:16: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (TaskID >= MAX_TASKS) // max number of active tasks
               ^
Sources/APIs_Sources/Events.c:75:38: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[TaskID]->Extended == 0)
                                     ^
Sources/APIs_Sources/Events.c:80:35: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[TaskID]->State == SUSPENDED)
                                  ^
Sources/APIs_Sources/Events.c:92:45: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (OsTasksPCB[RunningTaskID]->Extended == 0)
                                            ^
Sources/APIs_Sources/OsTasks.c:88:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.4]
  {
  ^
Sources/APIs_Sources/OsTasks.c:51:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
  return;
  ^
Sources/APIs_Sources/Events.c:19:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_ID;
        ^
Sources/APIs_Sources/Events.c:23:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_ACCESS;
        ^
Sources/APIs_Sources/Events.c:27:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_STATE;
        ^
Sources/APIs_Sources/Events.c:37:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OK;// clear the activated events
        ^
Sources/APIs_Sources/Events.c:46:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_ACCESS;
        ^
Sources/APIs_Sources/Events.c:51:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_RESOURCE;
        ^
Sources/APIs_Sources/Events.c:72:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_ID;
        ^
Sources/APIs_Sources/Events.c:77:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_ACCESS;
        ^
Sources/APIs_Sources/Events.c:82:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_STATE;
        ^
Sources/APIs_Sources/Events.c:94:9: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
        return E_OS_ACCESS;
        ^
Sources/APIs_Sources/OsTasks.c:68:2: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.7]
 }
 ^
Headers/APIs_Headers/Libraries.h:1:0: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-21.6]
#include <stdio.h>
^
Headers/APIs_Headers/OSExecutionControl.h:11:6: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-2.7]
void ShutDownOS (StatusType Error);
     ^
Sources/APIs_Sources/OSExecutionControl.c:14:11: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
  if(Mode == OSDEFAULTAPPMODE)
          ^
Sources/APIs_Sources/OSExecutionControl.c:16:17: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-17.7]
    ActivateTask(IDLE_TASK);
                ^
Sources/APIs_Sources/Resources.c:86:57: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
                OsResourcesPCB[ResID]->Resource_Owner = INVALID_TASK;
                                                        ^
Sources/APIs_Sources/Resources.c:18:15: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (ResID >= INVALID_RESOURCE)
              ^
Sources/APIs_Sources/Resources.c:24:51: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
        if (OsResourcesPCB[ResID]->Resource_Owner != INVALID_TASK ||
                                                  ^
Sources/APIs_Sources/Resources.c:50:15: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
    if (ResID >= INVALID_RESOURCE)
              ^
Sources/APIs_Sources/Resources.c:56:51: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
        if (OsResourcesPCB[ResID]->Resource_Owner == INVALID_TASK
                                                  ^
Sources/APIs_Sources/Resources.c:58:77: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
                && OsTasksPCB[OsResourcesPCB[ResID]->Resource_Owner]->State == RUNNING))
                                                                            ^
Sources/APIs_Sources/Resources.c:75:58: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
                if (OsResourcesPCB[ResID]->Prev_Resource != INVALID_RESOURCE)
                                                         ^
Sources/APIs_Sources/Resources.c:88:56: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
                if (OsTasksPCB[RunningTaskID]->F_PREEM == TASK_FULL)
                                                       ^
Sources/APIs_Sources/Resources.c:57:13: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-12.1]
            || (OsTasksPCB[RunningTaskID]->Last_Running_Resource != ResID
            ^
Sources/APIs_Sources/Tasks.c:149:13: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-7.2]
  *TaskID = INVALID_TASK;
            ^
Sources/APIs_Sources/Tasks.c:14:13: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (TaskID >= MAX_TASKS) //max number of active tasks
            ^
Sources/APIs_Sources/Tasks.c:21:33: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if ((OsTasksPCB[TaskID]->State == SUSPENDED) && (OsTasksPCB[TaskID]->Activation_Request != OsTasksPCB[TaskID]->Activation_Record)) // if task is suspended and activationrecord not max
                                ^
Sources/APIs_Sources/Tasks.c:40:53: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (OsTasksPCB[RunningTaskID]->Reasourses_Occupied != 0)
                                                    ^
Sources/APIs_Sources/Tasks.c:58:20: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (RunningTaskID >= INVALID_TASK) //  implement RunningTaskID later
                   ^
Sources/APIs_Sources/Tasks.c:63:53: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (OsTasksPCB[RunningTaskID]->Reasourses_Occupied != 0)
                                                    ^
Sources/APIs_Sources/Tasks.c:71:13: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (TaskID >= INVALID_TASK)
            ^
Sources/APIs_Sources/Tasks.c:79:32: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (OsTasksPCB[TaskID]->State == SUSPENDED) // if task is suspended
                               ^
Sources/APIs_Sources/Tasks.c:101:19: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if(RunningTaskID == INVALID_TASK)
                  ^
Sources/APIs_Sources/Tasks.c:115:41: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
  if(OsTasksPCB[RunningTaskID]->F_PREEM == TASK_FULL)
                                        ^
Sources/APIs_Sources/Tasks.c:147:20: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (RunningTaskID == INVALID_TASK) //  implement RunningTaskID later
                   ^
Sources/APIs_Sources/Tasks.c:163:13: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-10.4]
 if (TaskID >= MAX_TASKS)
            ^
Sources/APIs_Sources/Tasks.c:19:4: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
   return StatusMsg;
   ^
Sources/APIs_Sources/Tasks.c:25:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
  return StatusMsg;
  ^
Sources/APIs_Sources/Tasks.c:61:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
  return StatusMsg;
  ^
Sources/APIs_Sources/Tasks.c:66:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
  return StatusMsg;
  ^
Sources/APIs_Sources/Tasks.c:75:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
  return StatusMsg;
  ^
Sources/APIs_Sources/Tasks.c:84:4: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
   return StatusMsg;
   ^
Sources/APIs_Sources/Tasks.c:88:3: style: misra violation (use --rule-texts=<file> to get proper output) [misra-c2012-15.5]
  return StatusMsg;
  ^
Sources/APIs_Sources/Tasks.c:53:0: style: The function 'ChainTask' is never used. [unusedFunction]

^
Sources/APIs_Sources/Events.c:90:0: style: The function 'ClearEvent' is never used. [unusedFunction]

^
Sources/APIs_Sources/OSExecutionControl.c:4:0: style: The function 'GetActiveApplicationMode' is never used. [unusedFunction]

^
Sources/APIs_Sources/Events.c:65:0: style: The function 'GetEvent' is never used. [unusedFunction]

^
Sources/APIs_Sources/Resources.c:12:0: style: The function 'GetResource' is never used. [unusedFunction]

^
Sources/APIs_Sources/Tasks.c:142:0: style: The function 'GetTaskID' is never used. [unusedFunction]

^
Sources/APIs_Sources/Tasks.c:159:0: style: The function 'GetTaskState' is never used. [unusedFunction]

^
Sources/APIs_Sources/Resources.c:43:0: style: The function 'ReleaseResource' is never used. [unusedFunction]

^
Sources/APIs_Sources/Tasks.c:93:0: style: The function 'Schedule' is never used. [unusedFunction]

^
Sources/APIs_Sources/Events.c:14:0: style: The function 'SetEvent' is never used. [unusedFunction]

^
Sources/APIs_Sources/OSExecutionControl.c:22:0: style: The function 'ShutDownOS' is never used. [unusedFunction]

^
Sources/APIs_Sources/OSExecutionControl.c:9:0: style: The function 'StartOS' is never used. [unusedFunction]

^
GeneratedFiles/OsGenerated.c:4:0: style: The function 'TasksInit' is never used. [unusedFunction]

^
Sources/APIs_Sources/Tasks.c:34:0: style: The function 'TerminateTask' is never used. [unusedFunction]

^
Sources/APIs_Sources/Events.c:42:0: style: The function 'WaitEvent' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

